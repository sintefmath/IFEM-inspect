#!/usr/bin/env python3

from ifem import Result

import argparse
import sys
import os
from operator import attrgetter
from itertools import groupby

import numpy as np
import pylab

import GeoMod as gm


commands = {}

def command(func):
    commands[func.__name__] = func
    return func


@command
def summary(f, args):
    width = 70
    left = width // 2 - 2

    left = max(len(b.name) for b in f.bases()) + 2
    left = max(left, 15)

    print('{fn: ^{w}}'.format(fn=f.filename.upper(), w=width))
    print('=' * width)

    print('{name: >{w}}:  {nlevels} ({start:g}, ..., {end:g})'.format(
        name='Timesteps', w=left, nlevels=f.ntimes - 1,
        start=f.time(0).t, end=f.time(-1).t,
    ))

    print('{name: >{w}}:  {dt:g}'.format(name='Delta-t', w=left, dt=f.dt))

    for b in f.bases():
        order = {2: 'linear', 3: 'quadratic', 4: 'cubic', 5: 'quartic',
                 6: 'quintic', 7: 'sextic', 8: 'septic', 9: 'octic'}[b.order]

        print('{name: >{w}}:  {b.npatches} patch{pl}, {b.ncoefs} coefs ({type}; {order})'.format(
            name=b.name, w=left, b=b, pl='' if b.npatches == 1 else 'es',
            type=b.type.__name__.lower(), order=order
        ))

        for fld in b.fields:
            print('{title: >{w}}   - {f.name} ({f.type})'.format(title='', w=left, f=fld))


@command
def plot(f, args):
    parser = argparse.ArgumentParser(prog='ifem-inspect plot')
    parser.add_argument('field')
    parser.add_argument('-p', '--patch', type=int)
    parser.add_argument('-t', '--time', type=float, nargs='+')
    parser.add_argument('-l', '--level', type=int, nargs='+')
    parser.add_argument('-u', type=float)
    parser.add_argument('-v', type=float)
    parser.add_argument('-w', type=float)
    parser.add_argument('-N', type=int, default=101)
    parser.add_argument('--ymin', type=float)
    parser.add_argument('--ymax', type=float)
    parser.add_argument('--xmin', type=float)
    parser.add_argument('--xmax', type=float)
    args = parser.parse_args(args)

    args.field = f.field(args.field)
    if args.patch is None and field.basis.npatches == 1:
        args.patch = 1
    if args.time is not None and args.level is None:
        args.level = [f.level(t) for t in args.time]
    elif args.level is not None:
        args.level = [f.time(l) for l in args.level]
    else:
        args.level = [f.time(l) for l in range(f.ntimes)]

    patches = [args.field.patch(l.level, args.patch) for l in args.level]

    params = [args.u, args.v, args.w][:patches[0].pardim]
    variable = params.index(None)
    params[variable] = list(np.linspace(patches[0].start(variable),
                                        patches[0].end(variable), args.N))
    values = [p(*params).flat for p in patches]

    for v in values:
        pylab.plot(params[variable], v)

    if args.ymin is not None:
        pylab.ylim(ymin=args.ymin)
    if args.ymax is not None:
        pylab.ylim(ymax=args.ymax)
    if args.xmin is not None:
        pylab.xlim(xmin=args.xmin)
    if args.xmax is not None:
        pylab.xlim(xmax=args.xmax)

    pylab.show()


def parse_command(args):
    try:
        xml_files = {f.name.rsplit('.', 1)[0] for f in os.scandir()
                     if f.is_file() and f.name.endswith('.xml')}
        hdf_files = {f.name.rsplit('.', 1)[0] for f in os.scandir()
                     if f.is_file() and f.name.endswith('.hdf5')}
        candidates = xml_files & hdf_files
        default_file = next(iter(candidates))
    except StopIteration:
        default_file = None

    parser = argparse.ArgumentParser(
        description='Inspect an IFEM result file.'
    )
    parser.add_argument('command', choices=commands, default='summary', nargs='?')
    parser.add_argument('file', default=default_file, nargs='?')
    parser.add_argument('args', nargs=argparse.REMAINDER)
    args = parser.parse_args(args)

    args.command = commands[args.command]

    # If the file doesn't exist, use default and push the file as an arg instead
    if default_file and not (os.path.isfile(args.file + '.hdf5') and
                             os.path.isfile(args.file + '.xml')):
        args.args = [args.file] + args.args
        args.file = default_file

    return args


def main():
    cmd = parse_command(sys.argv[1:])

    if not cmd.file:
        print('Missing file')
        sys.exit(1)

    with Result(cmd.file) as f:
        cmd.command(f, cmd.args)


if __name__ == '__main__':
    main()
