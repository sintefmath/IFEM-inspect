#!/usr/bin/env python3

import h5py
import argparse
import sys
import os
import GeoMod as gm
from operator import attrgetter
from io import StringIO
from itertools import groupby


commands = {}


def command(func):
    commands[func.__name__] = func
    return func


@command
def summary(f, args):
    width = 50
    left = width // 2 - 2

    print('{fn: ^{w}}'.format(fn=f.filename, w=width))
    print('=' * width)

    nlevels = len(f)

    if nlevels == 0:
        print('{name: >{w}}: 0'.format(name='Time levels', w=left))
        return
    assert '0' in f
    assert str(nlevels - 1) in f
    print('{name: >{w}}: {nlevels: >4} ({start:.2f}, ..., {end:.2f})'.format(
        name='Time levels', w=left, nlevels=nlevels,
        start=f['0']['timeinfo']['SIMbase-1'][0],
        end=f[str(nlevels-1)]['timeinfo']['SIMbase-1'][0],
    ))

    nbases = len(f['0']['basis'])
    print('{name: >{w}}: {nbases: >4}'.format(name='Bases', w=left, nbases=nbases))

    for name, basis in f['0']['basis'].items():
        g2data = basis['1'][:].tobytes().decode('utf-8')
        patches = gm.SplineObject.read_g2(StringIO(g2data))
        patches.sort(key=attrgetter('pardim'))
        types = (t.__name__.lower() for t, _ in groupby(patches, key=type))

        print('{name: >{w}}: {npatches: >4} patch{pl} ({types})'.format(
            name=name, w=left, npatches=len(patches),
            pl='' if len(patches) == 1 else 'es',
            types=', '.join(types)
        ))


def parse_command(args):
    try:
        default_file = next(f for f in os.scandir()
                            if f.is_file() and f.name.endswith('.hdf5')).name
    except StopIteration:
        default_file = None

    parser = argparse.ArgumentParser(
        description='Inspect an IFEM result file.'
    )
    parser.add_argument('command', choices=commands, default='summary', nargs='?')
    parser.add_argument('file', default=default_file, nargs='?')
    parser.add_argument('args', nargs='*')
    args = parser.parse_args(args)

    args.command = commands[args.command]
    return args


def main():
    cmd = parse_command(sys.argv[1:])

    with h5py.File(cmd.file, 'r') as f:
        cmd.command(f, cmd.args)


if __name__ == '__main__':
    main()
