#!/usr/bin/env python3

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from os.path import splitext, isfile
from os import listdir
from collections import OrderedDict, namedtuple
import readline
import sys
import textwrap

from ifem.parser import IFEMScriptParser
from ifem.ast import IFEMScriptSemantics


commands = OrderedDict()
Command = namedtuple('Command', ['func', 'parser', 'needs_file'])
def command(needs_file=True):
    def decorator(fn):
        def func(basename, args):
            args = commands[fn.__name__].parser.parse_args(args)
            if needs_file and basename:
                args.basename = basename
            elif needs_file:
                print('No IFEM result file found')
                sys.exit(1)
            fn(**vars(args))
        commands[fn.__name__] = Command(
            func=func,
            parser=ArgumentParser(
                'ifem-inspect {}'.format(fn.__name__),
                description=fn.__doc__,
                add_help=False,
            ),
            needs_file=needs_file
        )
        return fn
    return decorator


def argument(*args, **kwargs):
    def decorator(fn):
        parser = commands[fn.__name__].parser
        parser.add_argument(*args, **kwargs)
        return fn
    return decorator


@argument('cmd', nargs='?', help='the command for which to show help')
@command(needs_file=False)
def help(cmd):
    """Show help for commands."""
    if cmd in commands:
        return commands[cmd].parser.print_help()
    if cmd:
        print("{}: no such command available; try 'ifem-inspect help'".format(command))
        sys.exit(2)

    # Create a list of commands in the same style as default ArgumentParser
    # help output
    max_cmd_len = max(len(cmd) for cmd in commands)
    indent = max_cmd_len + 4
    fill_width = 80 - indent
    cmdlist = []
    for name, cmd in commands.items():
        if cmd.parser.description:
            (first, *rest) = cmd.parser.description.split('\n')
            rest = textwrap.dedent('\n'.join(rest))
            (first, *rest) = textwrap.wrap('\n'.join([first, rest]), width=fill_width)
        else:
            first, rest = '', []
        cmdlist.append('  {name:{width}}  {first}'.format(
            name=name, width=max_cmd_len, first=first
        ))
        cmdlist.extend(' '*indent + s for s in rest)

    # Construct a dummpy parser just to print the help
    # We do this to make help strings uniform
    parser = ArgumentParser(
        'ifem-inspect',
        description='Inspect IFEM result files.',
        formatter_class=RawDescriptionHelpFormatter,
        add_help=False,
        epilog="available commands:\n" + '\n'.join(cmdlist),
    )
    parser.add_argument(
        'file', nargs='?',
        help="""The IFEM result file to inspect. May be the HDF5 file, the sidecar XML file
        or their common basename. If omitted, ifem-inspect looks for candidates
        in the cwd. Note, some commands do not require a file."""
    )
    parser.add_argument('cmd', help='The command to execute.')
    parser.print_help()


@command()
def interactive(basename):
    """Enter REPL mode."""
    parser = IFEMScriptParser()
    semantics = IFEMScriptSemantics()
    try:
        while True:
            s = input('>>> ')
            ast = parser.parse(s, rule_name='full', semantics=semantics)
            print(repr(ast))
    except EOFError:
        print()
        sys.exit(0)


def main():
    """Read the command and file arguments, and dispatch accordingly."""
    args = sys.argv[1:]

    # If no arguments, dispatch to help
    if not args:
        return commands['help'].func(None, args)

    # Check if the first argument is a valid file
    basename, _ = splitext(args[0])
    if isfile(basename + '.hdf5') and isfile(basename + '.xml'):
        args = args[1:]
    else:
        # Find a valid file in the current directory
        files = set(listdir('.'))
        basenames = {splitext(fn)[0] for fn in files}
        basenames = {bn for bn in basenames if
                     bn + '.hdf5' in files and bn + '.xml' in files and
                     isfile(bn + '.hdf5') and isfile(bn + '.xml')}
        if len(basenames) == 1:
            basename = next(iter(basenames))
        else:
            basename = None

    # Find the command and dispatch
    if not args:
        return help(args)
    cmd, args = args[0], args[1:]
    if cmd in commands:
        cmd = commands[cmd]
        return cmd.func(basename, args)
    print("{}: no such command available; try 'ifem-inspect help'".format(cmd),
          file=sys.stderr)
    sys.exit(2)


if __name__ == '__main__':
    main()
