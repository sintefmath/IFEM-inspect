#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.buffering import Buffer
from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__version__ = (2016, 9, 21, 8, 43, 34, 2)

__all__ = [
    'IFEMScriptParser',
    'IFEMScriptSemantics',
    'main'
]

KEYWORDS = set([])


class IFEMScriptBuffer(Buffer):
    def __init__(self,
                 text,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 namechars='',
                 **kwargs):
        super(IFEMScriptBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class IFEMScriptParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=True,
                 parseinfo=True,
                 keywords=KEYWORDS,
                 namechars='',
                 **kwargs):
        super(IFEMScriptParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            **kwargs
        )

    def parse(self, text, *args, **kwargs):
        if not isinstance(text, Buffer):
            text = IFEMScriptBuffer(text, **kwargs)
        return super(IFEMScriptParser, self).parse(text, *args, **kwargs)

    @graken()
    def _full_(self):
        self._expr_()
        self._check_eof()

    @graken()
    def _expr_(self):
        self._arith_()

    @graken()
    def _arith_(self):
        self._term_()

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('+')
                    with self._option():
                        self._token('-')
                    self._error('expecting one of: + -')
            self._term_()
        self._closure(block0)

    @graken()
    def _term_(self):
        self._factor_()

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('*')
                    with self._option():
                        self._token('/')
                    self._error('expecting one of: * /')
            self._factor_()
        self._closure(block0)

    @graken()
    def _factor_(self):
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('+')
                        with self._option():
                            self._token('-')
                        self._error('expecting one of: + -')
                self._factor_()
            with self._option():
                self._power_()
            self._error('no available options')

    @graken()
    def _power_(self):
        self._atom_expr_()
        self.add_last_node_to_name('@')
        with self._optional():
            self._token('**')
            self._factor_()
            self.add_last_node_to_name('@')

    @graken()
    def _atom_expr_(self):
        self._trailer_expr_()

    @graken()
    def _trailer_expr_(self):
        self._atom_()

        def block0():
            self._trailer_()
        self._closure(block0)

    @graken()
    def _trailer_(self):
        with self._choice():
            with self._option():
                self._token('[')
                self._index_list_()
                self._token(']')
            with self._option():
                self._token('(')
                self._arg_list_()
                self._token(')')
            with self._option():
                self._token('.')
                self._index_identifier_()
            self._error('no available options')

    @graken()
    def _atom_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._expr_()
                self.name_last_node('@')
                self._token(')')
            with self._option():
                self._vector_()
            with self._option():
                self._identifier_()
            with self._option():
                self._number_()
            self._error('no available options')

    @graken()
    def _identifier_(self):
        self._pattern(r'[a-zA-Z_][a-zA-Z0-9_]*')

    @graken()
    def _number_(self):
        self._pattern(r'[0-9]*([0-9]\.|\.[0-9]|[0-9])[0-9]*([eE][+-]?[0-9]+)?')

    @graken()
    def _vector_(self):
        with self._choice():
            with self._option():
                self._range_lit_()
            with self._option():
                self._vector_lit_()
            self._error('no available options')

    @graken()
    def _range_lit_(self):
        self._number_()
        self.add_last_node_to_name('@')
        self._token(':')
        self._number_()
        self.add_last_node_to_name('@')
        with self._optional():
            self._token(':')
            self._number_()
            self.add_last_node_to_name('@')

    @graken()
    def _vector_lit_(self):
        self._token('[')
        self._expr_()
        self.add_last_node_to_name('@')

        def block1():
            self._token(',')
            self._expr_()
            self.name_last_node('@')
        self._closure(block1)
        self._token(']')

    @graken()
    def _index_list_(self):
        with self._optional():
            self._index_()
            self.add_last_node_to_name('@')

        def block1():
            self._token(',')
            self._index_()
            self.name_last_node('@')
        self._closure(block1)

    @graken()
    def _index_(self):
        with self._choice():
            with self._option():
                self._index_uint_()
            with self._option():
                self._index_identifier_()
            self._error('no available options')

    @graken()
    def _index_identifier_(self):
        self._pattern(r'[xyz:]*')

    @graken()
    def _index_uint_(self):
        self._pattern(r'[0-9]+')

    @graken()
    def _arg_list_(self):
        self._arg_()
        self.add_last_node_to_name('@')

        def block1():
            self._token(',')
            self._arg_()
            self.name_last_node('@')
        self._closure(block1)

    @graken()
    def _arg_(self):
        with self._choice():
            with self._option():
                self._double_arg_()
            with self._option():
                self._single_arg_()
            with self._option():
                self._expr_()
            self._error('no available options')

    @graken()
    def _single_arg_(self):
        self._identifier_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('=')
                with self._option():
                    self._token('<=')
                with self._option():
                    self._token('>=')
                with self._option():
                    self._token('<')
                with self._option():
                    self._token('>')
                self._error('expecting one of: < <= = > >=')
        self._expr_()

    @graken()
    def _double_arg_(self):
        self._expr_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('<=')
                with self._option():
                    self._token('<')
                self._error('expecting one of: < <=')
        self._identifier_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('<=')
                with self._option():
                    self._token('<')
                self._error('expecting one of: < <=')
        self._expr_()


class IFEMScriptSemantics(object):
    def full(self, ast):
        return ast

    def expr(self, ast):
        return ast

    def arith(self, ast):
        return ast

    def term(self, ast):
        return ast

    def factor(self, ast):
        return ast

    def power(self, ast):
        return ast

    def atom_expr(self, ast):
        return ast

    def trailer_expr(self, ast):
        return ast

    def trailer(self, ast):
        return ast

    def atom(self, ast):
        return ast

    def identifier(self, ast):
        return ast

    def number(self, ast):
        return ast

    def vector(self, ast):
        return ast

    def range_lit(self, ast):
        return ast

    def vector_lit(self, ast):
        return ast

    def index_list(self, ast):
        return ast

    def index(self, ast):
        return ast

    def index_identifier(self, ast):
        return ast

    def index_uint(self, ast):
        return ast

    def arg_list(self, ast):
        return ast

    def arg(self, ast):
        return ast

    def single_arg(self, ast):
        return ast

    def double_arg(self, ast):
        return ast


def main(
        filename,
        startrule,
        trace=False,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        **kwargs):

    with open(filename) as f:
        text = f.read()
    whitespace = whitespace or None
    parser = IFEMScriptParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard,
        ignorecase=ignorecase,
        **kwargs)
    return ast

if __name__ == '__main__':
    import json
    ast = generic_main(main, IFEMScriptParser, name='IFEMScript')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
